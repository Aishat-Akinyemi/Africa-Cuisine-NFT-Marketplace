{"version":3,"sources":["components/Cover.js","components/ui/Notifications.js","utils/index.js","utils/constants.js","components/ui/Identicon.js","components/wallet/index.js","hooks/useMinterContract.js","hooks/useContract.js","utils/minter.js","components/minter/nfts/Add.js","components/minter/nfts/Card.js","components/ui/Loader.js","components/minter/nfts/index.js","App.js","hooks/useBalance.js","reportWebVitals.js","index.js"],"names":["myStyle","height","marginTop","Cover","name","coverDescription","connect","className","style","maxWidth","margin","src","alt","width","Button","onClick","catch","e","console","log","variant","defaultProps","Notification","position","autoClose","hideProgressBar","newestOnTop","closeOnClick","rtl","pauseOnFocusLoss","draggable","pauseOnHover","NotificationSuccess","text","NotificationError","DefaultProps","truncateAddress","address","slice","length","formatBigNumber","num","shiftedBy","toFixed","Identicon","size","rest","ref","useRef","useEffect","current","innerHTML","appendChild","Jazzicon","parseInt","Wallet","amount","symbol","destroy","Dropdown","Toggle","align","id","Spinner","animation","Menu","Item","href","target","Stack","direction","gap","Divider","as","useMinterContract","abi","contractAddress","useContractKit","getConnectedKit","useState","contract","setContract","getContract","useCallback","a","kit","web3","eth","Contract","useContract","AfricanCuisineNFTAbi","AfricanCuisineNFTContractAddress","AfricanCuisineNFT","client","ipfsHttpClient","createNft","minterContract","performActions","price","description","ipfsImage","ownerAddress","defaultAccount","data","JSON","stringify","image","owner","add","added","url","path","_price","ethers","utils","parseUnits","String","methods","safeMint","send","from","transaction","uploadToIpfs","file","files","progress","prog","getNfts","nfts","getImageLength","call","nftsLength","i","nft","Promise","resolve","getImage","tokenURI","res","fetchNftMeta","meta","fetchNftOwner","index","tokenId","sold","push","Number","all","ipfsUrl","axios","get","ownerOf","fetchNftContractOwner","transferOwnership","newAddress","makeTransfer","error","buyImage","value","sellImage","AddNfts","save","setName","setIpfsImage","setDescription","setPrice","show","setShow","handleClose","type","Modal","onHide","centered","Header","closeButton","Title","Body","Form","FloatingLabel","controlId","label","Control","placeholder","onChange","imageUrl","alert","Footer","disabled","NftCard","contractOwner","buyNft","sellNft","sendAddrss","setSendAddrss","Col","Card","Badge","bg","objectFit","Text","handleSend","Loader","role","NftList","setNfts","loading","setLoading","setNftOwner","addNft","toast","getAssets","sendNft","fetchContractOwner","_address","allNfts","padding","Add","Row","xs","sm","lg","map","_nft","App","balance","setBalance","getBalance","getTotalBalance","useBalance","Container","fluid","Nav","CELO","updateBalance","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","networks","Alfajores","network","NetworkNames","rpcUrl","graphQl","explorer","chainId","dapp","document","getElementById"],"mappings":"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","file":"static/js/main.0ec62257.chunk.js","sourcesContent":["import React from 'react';\nimport { Button } from \"react-bootstrap\";\nimport PropTypes from 'prop-types';\n\nconst myStyle={\n  height:'100vh',\n  marginTop: \"-250px\"\n};\nconst Cover = ({ name, coverDescription,connect }) => {\n  if (name) {\n    return (\n      <div\n          className=\"text-center \"\n          style={myStyle}\n        >\n\n          <div className=\"mt-auto text-light mb-0 bg-dark\">\n            <div\n              className=\" ratio ratio-1x1 mx-auto mb-2\"\n              style={{ maxWidth: \"320px\" }}\n            >\n            </div>\n            <div style={{ margin: '100px' }}>\n            <img src=\"https://i.ibb.co/5hNppMg/okazi-soup-1-8.webp\" alt=\"africa dishes variety\" style={{ width: '400px', }}/>\n            </div>\n            <h1>{name}</h1>\n            <p>{coverDescription}</p>\n            <br></br>\n            <p>Please connect your wallet to continue.</p>\n            <Button\n              onClick={() => connect().catch((e) => console.log(e))}\n              variant=\"btn btn-light\"\n              className=\"rounded-pill px-3 mt-3 mb-5\"\n            >\n              Connect Wallet\n            </Button>\n          </div>\n\n        </div>\n    );\n  }\n\n  return null;\n};\n\n\nCover.propTypes = {\n  // props passed into this component\n  name: PropTypes.string,\n};\n\nCover.defaultProps = {\n  name: '',\n};\n\nexport default Cover;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {ToastContainer} from 'react-toastify';\n\nconst Notification = () => (\n  <ToastContainer\n    position=\"bottom-center\"\n    autoClose={5000}\n    hideProgressBar\n    newestOnTop\n    closeOnClick\n    rtl={false}\n    pauseOnFocusLoss\n    draggable={false}\n    pauseOnHover\n  />\n);\n\nconst NotificationSuccess = ({ text }) => (\n  <div>\n    <i className=\"bi bi-check-circle-fill text-success mx-2\" />\n    <span className=\"text-secondary mx-1\">{text}</span>\n  </div>\n);\n\nconst NotificationError = ({ text }) => (\n  <div>\n    <i className=\"bi bi-x-circle-fill text-danger mx-2\" />\n    <span className=\"text-secondary mx-1\">{text}</span>\n  </div>\n);\n\nconst Props = {\n  text: PropTypes.string,\n};\n\nconst DefaultProps = {\n  text: '',\n};\n\nNotificationSuccess.propTypes = Props;\nNotificationSuccess.defaultProps = DefaultProps;\n\nNotificationError.propTypes = Props;\nNotificationError.defaultProps = DefaultProps;\n\nexport { Notification, NotificationSuccess, NotificationError };\n","import {ERC20_DECIMALS} from \"./constants\";\n\n// format a wallet address\nexport const truncateAddress = (address) => {\n    if (!address) return\n    return address.slice(0, 5) + \"...\" + address.slice(address.length - 4, address.length);\n}\n\n// convert from big number\nexport const formatBigNumber = (num) => {\n    if (!num) return\n    return num.shiftedBy(-ERC20_DECIMALS).toFixed(2);\n}","const ERC20_DECIMALS = 18;\nexport { ERC20_DECIMALS };\n","import { useEffect, useRef } from \"react\";\nimport Jazzicon from \"@metamask/jazzicon\";\n\nexport default function Identicon({address, size, ...rest}) {\n  const ref = useRef();\n\n  useEffect(() => {\n    if (address && ref.current) {\n      ref.current.innerHTML = \"\";\n      ref.current.appendChild(Jazzicon(size, parseInt(address.slice(2, 10), 16)));\n    }\n  }, [address, size]);\n\n  return (\n    <div {...rest} >\n        <div ref={ref} style={{width:`${size}px`,height:`${size}px`}}  />\n    </div>\n  )\n}","import React from 'react';\nimport {Dropdown, Stack, Spinner} from 'react-bootstrap';\nimport {formatBigNumber, truncateAddress} from '../../utils';\nimport Identicon from '../ui/Identicon'\n\nconst Wallet = ({address, amount, symbol, destroy}) => {\n    if (address) {\n        return <>\n{/* Wallet Dropdown functionality */}\n    <Dropdown>\n        <Dropdown.Toggle variant=\"light\" align=\"end\" id=\"dropdown-basic\"\n                            className=\"d-flex align-items-center border rounded-pill py-1\">\n            {amount ? (\n                <>{formatBigNumber(amount)} <span className=\"ms-1\"> {symbol}</span></>\n            ) : (<Spinner animation=\"border\" size=\"sm\" className=\"opacity-25\"/>)}\n            <Identicon address={address} size={28} className=\"ms-2 me-1\"/>\n        </Dropdown.Toggle>\n\n      <Dropdown.Menu className=\"shadow-lg border-0\" >\n        <Dropdown.Item href={`https://alfajores-blockscout.celo-testnet.org/address/${address}/transactions`}  target=\"_blank\">     \n            <Stack direction=\"horizontal\" gap={2}>\n                <i className=\"bi bi-person-circle fs-4\" />\n                <span className=\"font-monospace\">{truncateAddress(address)}</span>\n            </Stack>\n        </Dropdown.Item>\n        <Dropdown.Divider/>\n          <Dropdown.Item as=\"button\" className=\"d-flex align-items-center\" onClick={() => {\n              destroy()\n          }}>\n              <i className=\"bi bi-box-arrow-right me-2 fs-4\"/>\n              Disconnect\n          </Dropdown.Item>\n      </Dropdown.Menu>\n    </Dropdown>\n    \n    </>\n  }\n\n  return null;\n};\n\nexport default Wallet;","import {useContract} from './useContract';\nimport AfricanCuisineNFTAbi from '../contracts/AfricanCuisine.json';\nimport AfricanCuisineNFTContractAddress from '../contracts/AfricanCuisineNFT-address.json';\n\n\n// export interface for NFT contract\nexport const useMinterContract = () => useContract(AfricanCuisineNFTAbi.abi, AfricanCuisineNFTContractAddress.AfricanCuisineNFT);\n","import { useState, useEffect, useCallback } from 'react';\nimport { useContractKit } from '@celo-tools/use-contractkit';\n\nexport const useContract = (abi, contractAddress) => {\n  const { getConnectedKit, address } = useContractKit();\n  const [contract, setContract] = useState(null);\n\n  const getContract = useCallback(async () => {\n    const kit = await getConnectedKit();\n\n    // get a contract interface to interact with\n    setContract(new kit.web3.eth.Contract(abi, contractAddress));\n  }, [getConnectedKit, abi, contractAddress]);\n\n  useEffect(() => {\n    if (address) getContract();\n  }, [address, getContract]);\n\n  return contract;\n};\n","import { create as ipfsHttpClient } from \"ipfs-http-client\";\nimport axios from \"axios\";\nimport { ethers } from \"ethers\";\n\n// initialize IPFS\nconst client = ipfsHttpClient(\"https://ipfs.infura.io:5001/api/v0\");\n\n// mint an NFT\nexport const createNft = async (\n  minterContract,\n  performActions,\n  { name,price, description, ipfsImage, ownerAddress }\n) => {\n  await performActions(async (kit) => {\n    if (!name || !description || !ipfsImage) return;\n    const { defaultAccount } = kit;\n\n    // convert NFT metadata to JSON format\n    const data = JSON.stringify({\n      name,\n      price,\n      description,\n      image: ipfsImage,\n      owner: defaultAccount\n    });\n\n    try {\n      // save NFT metadata to IPFS\n      const added = await client.add(data);\n\n      // IPFS url for uploaded metadata\n      const url = `https://ipfs.infura.io/ipfs/${added.path}`;\n      const _price = ethers.utils.parseUnits(String(price), \"ether\");\n\n\n      // mint the NFT and save the IPFS url to the blockchain\n      let transaction = await minterContract.methods\n        .safeMint(url, _price)\n        .send({ from: defaultAccount });\n\n      return transaction;\n    } catch (error) {\n      console.log(\"Error uploading file: \", error);\n    }\n  });\n};\n\n// function to upload a file to IPFS\nexport const uploadToIpfs = async (e) => {\n  const file = e.target.files[0];\n  if (!file) return;\n  try {\n    const added = await client.add(file, {\n      progress: (prog) => console.log(`received: ${prog}`),\n    });\n    return `https://ipfs.infura.io/ipfs/${added.path}`;\n  } catch (error) {\n    console.log(\"Error uploading file: \", error);\n  }\n};\n\n// fetch all NFTs on the smart contract\nexport const getNfts = async (minterContract) => {\n  try {\n    const nfts = [];\n    const nftsLength = await minterContract.methods.getImageLength().call();\n    for (let i = 0; i < Number(nftsLength); i++) {\n      const nft = new Promise(async (resolve) => {\n        const image = await minterContract.methods.getImage(i).call();\n        const res = await minterContract.methods.tokenURI(i).call();\n        const meta = await fetchNftMeta(res);\n        const owner = await fetchNftOwner(minterContract, i);\n        resolve({\n          index: i,\n          tokenId: i,\n          owner,\n          price: image.price,\n          sold: image.sold,\n          name: meta.data.name,\n          image: meta.data.image,\n          description: meta.data.description        });\n      });\n      nfts.push(nft);\n    }\n    return Promise.all(nfts);\n  } catch (e) {\n    console.log({ e });\n  }\n};\n\n// get the metedata for an NFT from IPFS\nexport const fetchNftMeta = async (ipfsUrl) => {\n  try {\n    if (!ipfsUrl) return null;\n    const meta = await axios.get(ipfsUrl);\n    return meta;\n  } catch (e) {\n    console.log({ e });\n  }\n};\n\n// get the owner address of an NFT\nexport const fetchNftOwner = async (minterContract, index) => {\n  try {\n    return await minterContract.methods.ownerOf(index).call();\n  } catch (e) {\n    console.log({ e });\n  }\n};\n\n// get the address that deployed the NFT contract\nexport const fetchNftContractOwner = async (minterContract) => {\n  try {\n    let owner = await minterContract.methods.owner().call();\n    return owner;\n  } catch (e) {\n    console.log({ e });\n  }\n};\n\nexport const transferOwnership = async (\n  minterContract,\n  ownerAddress,\n  newAddress,\n  tokenId,\n  performActions\n) => {\n  try {\n    await performActions(async (kit) => {\n      const { defaultAccount } = kit;\n      // console.log(ownerAddress, newAddress, tokenId, defaultAccount);\n      await minterContract.methods\n        .makeTransfer(ownerAddress, newAddress, tokenId)\n        .send({ from: defaultAccount });\n    });\n  } catch (error) {\n    console.log({ error });\n  }\n};\nexport const buyImage = async (\n  minterContract,\n  index,\n  tokenId,\n  performActions\n) => {\n  try {\n    await performActions(async (kit) => {\n      const { defaultAccount } = kit;\n      // console.log(ownerAddress, newAddress, tokenId, defaultAccount);\n      const image = await minterContract.methods.getImage(index).call();\n      await minterContract.methods\n        .buyImage(tokenId)\n        .send({ from: defaultAccount, value: image.price });\n    });\n  } catch (error) {\n    console.log({ error });\n  }\n};\nexport const sellImage = async (minterContract, tokenId, performActions) => {\n  try {\n    await performActions(async (kit) => {\n      const { defaultAccount } = kit;\n      await minterContract.methods\n        .sellImage(tokenId)\n        .send({ from: defaultAccount });\n    });\n  } catch (error) {\n    console.log({ error });\n  }\n};\nexport const getOwners = async (minterContract) => {\n  try {\n    const ownerCount = await minterContract.methods.getOwners().call();\n    return ownerCount;\n  } catch (error) {\n    console.log({ error });\n  }\n};\n","/* eslint-disable react/jsx-filename-extension */\nimport React, { useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Button, Modal, Form, FloatingLabel } from \"react-bootstrap\";\nimport { uploadToIpfs } from \"../../../utils/minter\";\n\n\nconst AddNfts = ({ save, address }) => {\n  const [name, setName] = useState(\"\");\n  const [ipfsImage, setIpfsImage] = useState(\"\");\n  const [description, setDescription] = useState(\"\");\n  const [price, setPrice] = useState(\"\")\n\n\n  const [show, setShow] = useState(false);\n\n\n  // check if all form data has been filled\n  const isFormFilled = () =>{\n   return name && ipfsImage && description;\n  }\n      \n\n  // close the popup modal\n  const handleClose = () => {\n    setShow(false);\n    // setAttributes([]);\n  };\n\n  // display the popup modal\n  const handleShow = () => setShow(true);\n\n  return (\n    <>\n      <Button type=\"button\"\n      style ={{\"borderRadius\":\"14px\", \"marginBottom\": \"20px\"}}\n        onClick={handleShow}\n        variant=\"dark\"\n        className=\"btn btn-outline-dark text-light\"\n     >Add African Cuisine NFT</Button>\n\n      {/* Modal */}\n      <Modal show={show} onHide={handleClose} centered>\n        <Modal.Header closeButton>\n          <Modal.Title>Create NFT</Modal.Title>\n        </Modal.Header>\n\n        <Modal.Body>\n          <Form>\n            <FloatingLabel\n              controlId=\"inputLocation\"\n              label=\"Name\"\n              className=\"mb-3\"\n            >\n              <Form.Control\n                type=\"text\"\n                placeholder=\"Name of Dish\"\n                onChange={(e) => {\n                  setName(e.target.value);\n                }}\n              />\n            </FloatingLabel>\n\n            <FloatingLabel\n              controlId=\"inputDescription\"\n              label=\"Description\"\n              className=\"mb-3\"\n            >\n              <Form.Control\n                as=\"textarea\"\n                placeholder=\"description\"\n                style={{ height: \"80px\" }}\n                onChange={(e) => {\n                  setDescription(e.target.value);\n                }}\n              />\n            </FloatingLabel>\n\n            <FloatingLabel\n              controlId=\"inputLocation\"\n              label=\"Price\"\n              className=\"mb-3\"\n            >\n              <Form.Control\n                type=\"text\"\n                placeholder=\"Price of NFT\"\n                onChange={(e) => {\n                  setPrice(e.target.value);\n                }}\n              />\n            </FloatingLabel>\n\n            <Form.Control\n              type=\"file\"\n              className={\"mb-3\"}\n              onChange={async (e) => {\n                const imageUrl = await uploadToIpfs(e);\n                if (!imageUrl) {\n                  alert(\"failed to upload image\");\n                  return;\n                }\n                setIpfsImage(imageUrl);\n              }}\n              placeholder=\"Product name\"\n            ></Form.Control>\n          </Form>\n        </Modal.Body>\n\n        <Modal.Footer>\n          <Button variant=\"outline-secondary\" onClick={handleClose}>\n            Close\n          </Button>\n          <Button\n            variant=\"dark\"\n            disabled={!isFormFilled()}\n            onClick={() => {\n              save({\n                name,\n                price,\n                ipfsImage,\n                description,\n                ownerAddress: address\n              });\n              handleClose();\n            }}\n            >\n            Create NFT\n          </Button>\n        </Modal.Footer>\n      </Modal>\n    </>\n  );\n};\n\nAddNfts.propTypes = {\n\n  // props passed into this component\n  save: PropTypes.func.isRequired,\n  address: PropTypes.string.isRequired,\n};\n\nexport default AddNfts;\n","import React, { useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Card, Col, Badge, Stack, Row } from \"react-bootstrap\";\nimport { truncateAddress } from \"../../../utils\";\nimport { Form, Button } from \"react-bootstrap\";\nimport Identicon from \"../../ui/Identicon\";\n// NFT Cards Functionality\nconst NftCard = ({ nft, send, contractOwner, buyNft, sellNft }) => {\n  const { image, description, owner, name, index, price,sold } = nft;\n\n  const handleSend = (index, owner) => {\n    if (!sendAddrss) return;\n    send(sendAddrss, index, owner);\n  };\n  const [sendAddrss, setSendAddrss] = useState(\"\");\n  {\n    console.log(sold);\n  }\n  return (\n    <Col key={index}>\n      <Card className=\"h-100 bg-dark text-light\">\n        <Card.Header>\n          <Stack direction=\"horizontal\" gap={2}>\n            <Identicon address={owner} size={28} />\n            <span className=\"font-monospace text-secondary\">\n              {truncateAddress(owner)}\n            </span>\n            <Badge bg=\"secondary\" className=\"ms-auto\">\n              {price / 10 ** 18} CELO\n            </Badge>\n          </Stack>\n        </Card.Header>\n\n        <div className=\" ratio ratio-4x3\">\n          <img src={image} alt={description} style={{ objectFit: \"cover\" }} />\n        </div>\n\n        <Card.Body className=\"d-flex  flex-column text-center\">\n          <Card.Title>{name}</Card.Title>\n          <Card.Text className=\"flex-grow-1\">{description}</Card.Text>\n          <div>\n          \n          </div>\n          {contractOwner === owner && (\n            <>\n              <Form.Control\n                className={\"pt-2\"}\n                type=\"text\"\n                placeholder=\"Send Address\"\n                onChange={(e) => {\n                  setSendAddrss(e.target.value);\n                }}\n              />\n              <Button\n                variant=\"secondary\"\n                onClick={() => handleSend(index, owner)}\n              >\n                Send\n              </Button>\n            </>\n              )}\n\n            {!sold ? (\n              <Button variant=\"secondary\" onClick={buyNft}>\n                Buy\n              </Button>\n            ) : contractOwner === owner ? (\n              <Button variant=\"danger\" onClick={sellNft}>\n                Sell\n              </Button>\n            ) : (\n              <Button variant=\"danger\" disabled>\n              Sold\n              </Button>\n          )}\n        </Card.Body>\n      </Card>\n    </Col>\n  );\n};\n\nNftCard.propTypes = {\n  // props passed into this component\n  nft: PropTypes.instanceOf(Object).isRequired,\n};\n\nexport default NftCard;\n","import React from 'react';\nimport { Spinner} from \"react-bootstrap\";\nconst Loader = () => (\n \n \n  <div className=\"d-flex justify-content-center\">\n    <Spinner animation=\"border\" role=\"status\" className=\"opacity-25\">\n      <span className=\"visually-hidden\">Loading...</span>\n    </Spinner>\n  </div>\n\n);\nexport default Loader;\n","import { useContractKit } from \"@celo-tools/use-contractkit\";\nimport React, { useEffect, useState, useCallback } from \"react\";\nimport { toast } from \"react-toastify\";\nimport PropTypes from \"prop-types\";\nimport AddNfts from \"./Add\";\nimport Nft from \"./Card\";\nimport Loader from \"../../ui/Loader\";\nimport { NotificationSuccess, NotificationError } from \"../../ui/Notifications\";\nimport {\n  getNfts,\n  buyImage,\n  sellImage,\n  createNft,\n  fetchNftContractOwner,\n  transferOwnership\n} from \"../../../utils/minter\";\nimport { Row } from \"react-bootstrap\";\n\nconst NftList = ({ minterContract, name }) => {\n  const { performActions, address, kit } = useContractKit();\n  const [nfts, setNfts] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [nftOwner, setNftOwner] = useState(null);\n  const  {defaultAccount} = kit;\n\n  const addNft = async (data) => {\n    try {\n      setLoading(true);\n\n      // create an nft functionality\n      await createNft(minterContract, performActions, data);\n      toast(<NotificationSuccess text=\"Updating NFT list....\" />);\n      getAssets();\n    } catch (error) {\n      console.log({ error });\n      toast(<NotificationError text=\"Failed to create an NFT.\" />);\n    } finally {\n      setLoading(false);\n    }\n  };\n  const buyNft = async (index, tokenId) => {\n    try {\n      setLoading(true);\n\n      // Create a buy NFT functionality\n      await buyImage(minterContract, index, tokenId, performActions);\n      getAssets();\n    } catch (error) {\n      console.log(error);\n    } finally {\n      setLoading(false);\n    }\n  };\n  const sellNft = async (index) => {\n    try {\n      setLoading(true);\n      // Create a sell NFT functionality\n      await sellImage(minterContract, index, performActions);\n      getAssets();\n    } catch (error) {\n      console.log(error);\n    } finally {\n      setLoading(false);\n    }\n  };\n  const sendNft = async (address, tokenId, owner)=>{\n    try {\n      setLoading(true);\n      // Create a send/transfer NFT functionality\n      await transferOwnership(minterContract,owner, address, tokenId, performActions)\n      toast(<NotificationSuccess text=\"Updating Africa Cuisine NFT Marketplace list....\" />);\n      getAssets();\n    } catch (error) {\n      console.log({ error });\n      toast(<NotificationError text=\"Failed to send NFT.\" />);\n    } finally {\n      setLoading(false);\n    }\n  }\n\n  const fetchContractOwner = useCallback(async (minterContract) => {\n    // get the address that deployed the NFT contract\n    const _address = await fetchNftContractOwner(minterContract);\n    setNftOwner(_address);\n  }, []);\n\n  const getAssets = useCallback(async () => {\n    try {\n      setLoading(true);\n\n      // fetch all nfts from the smart contract\n      const allNfts = await getNfts(minterContract);\n      if (!allNfts) return;\n\n\n      setNfts(allNfts);\n    } catch (error) {\n      console.log({ error });\n    } finally {\n      setLoading(false);\n    }\n  }, [minterContract]);\n\n\n  useEffect(() => {\n    try {\n      if (address && minterContract) {\n        getAssets();\n        fetchContractOwner(minterContract);\n      }\n    } catch (error) {\n      console.log({ error });\n    }\n  }, [minterContract, address, getAssets, fetchContractOwner]);\n\n  if (address) {\n    return (\n      <>\n        {!loading ? (\n          <>\n            <div className=\"bg-dark text-light\" style={{margin:\"0\", padding:\"0\", width:\"100%\"}}>\n              <h1 className=\"fs-4 fw-bold mb-2\">{name}</h1>\n\n            </div>\n            <div>\n            <AddNfts save={addNft} address={address} />\n            <br />\n            </div>\n            <Row xs={1} sm={2} lg={3} className=\"g-3  mb-5 g-xl-4 g-xxl-5\">\n\n              {/* display all NFTs */}\n              {nfts.map((_nft) => (\n                <Nft\n                  key={_nft.index}\n                  contractOwner = {defaultAccount}\n                  buyNft={() => buyNft(_nft.index, _nft.tokenId)}\n                  sellNft={() => sellNft(_nft.tokenId)}\n                  send = {sendNft}\n                  nft={{\n                    ..._nft,\n                  }}\n                />\n              ))}\n            </Row>\n          </>\n        ) : (\n          <Loader />\n        )}\n      </>\n    );\n  }\n  return null;\n};\n\nNftList.propTypes = {\n  // props passed into this component\n  minterContract: PropTypes.instanceOf(Object),\n  updateBalance: PropTypes.func.isRequired,\n};\n\nNftList.defaultProps = {\n  minterContract: null,\n};\n\nexport default NftList;\n","import React from \"react\";\nimport Cover from \"./components/Cover\";\nimport { Notification } from \"./components/ui/Notifications\";\nimport Wallet from \"./components/wallet\";\nimport { useBalance, useMinterContract } from \"./hooks\";\n\nimport Nfts from \"./components/minter/nfts\";\nimport { useContractKit } from \"@celo-tools/use-contractkit\";\n\nimport \"./App.css\";\n\nimport { Container, Nav } from \"react-bootstrap\";\n\nconst App = function AppWrapper() {\n  const myStyle={\n    backgroundColor: \n    \"black\",\n    height:'100vh',\n    marginTop:'0px',\n    fontSize:'18px',\n    backgroundSize: 'cover',\n    backgroundRepeat: 'no-repeat',\n  };\n  const { address, destroy, connect } = useContractKit();\n\n  //  fetch user's celo balance using hook\n  const { balance, getBalance } = useBalance();\n\n  // initialize the NFT mint contract\n  const minterContract = useMinterContract();\n\n  return (\n    <>\n      <Notification />\n\n      {address ? (\n        <Container fluid=\"md\">\n          <Nav className=\"justify-content-end pt-3 pb-5\">\n            <Nav.Item>\n              {/*display user wallet*/}\n              <Wallet\n                address={address}\n                amount={balance.CELO}\n                symbol=\"CELO\"\n                destroy={destroy}\n              />\n            </Nav.Item>\n          </Nav>\n          <main>\n            {/*list NFTs*/}\n            <Nfts className=\"bg-dark text-dark\"\n              name=\"Africa Cuisine NFT Marketplace\"\n              updateBalance={getBalance}\n              minterContract={minterContract}\n            />\n          </main>\n        </Container>\n      ) : (\n        <Cover name=\"Africa Cuisine NFT Marketplace\" coverDescription =\"Showcasing and celebrating African Delicacies\" connect={connect} />\n      )}\n    </>\n  );\n};\n\nexport default App;\n","import { useState, useEffect, useCallback } from 'react';\nimport { useContractKit } from '@celo-tools/use-contractkit';\n\nexport const useBalance = () => {\n  const { address, kit } = useContractKit();\n  const [balance, setBalance] = useState(0);\n\n\n  const getBalance = useCallback(async () => {\n\n    // fetch a connected wallet token balance\n    const value = await kit.getTotalBalance(address);\n    setBalance(value);\n  }, [address, kit]);\n\n  useEffect(() => {\n    if (address) getBalance();\n  }, [address, getBalance]);\n\n  return {\n    balance,\n    getBalance,\n  };\n};\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({\n      getCLS, getFID, getFCP, getLCP, getTTFB,\n    }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport {\n  ContractKitProvider,\n  Alfajores,\n  NetworkNames,\n} from \"@celo-tools/use-contractkit\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport \"bootstrap-icons/font/bootstrap-icons.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"@celo-tools/use-contractkit/lib/styles.css\";\nimport \"react-toastify/dist/ReactToastify.min.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <ContractKitProvider\n      networks={[Alfajores]}\n      network={{\n        name: NetworkNames.Alfajores,\n        rpcUrl: \"https://alfajores-forno.celo-testnet.org\",\n        graphQl: \"https://alfajores-blockscout.celo-testnet.org/graphiql\",\n        explorer: \"https://alfajores-blockscout.celo-testnet.org\",\n        chainId: 44787,\n      }}\n      dapp={{\n        name: \"Africa Cusine NFT Marketplace\",\n        description: \"Celebrating and showcasing the African Delicacy\",\n        url: \"https://dacade.org\",\n      }}\n    >\n      <App />\n    </ContractKitProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}